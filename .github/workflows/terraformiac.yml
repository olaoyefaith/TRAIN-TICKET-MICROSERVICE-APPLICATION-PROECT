name: infrastructure as code deployment

on:
  push:
    branches: 
      - '*'
  pull_request:
    branches: none
  workflow_dispatch:

env:
  LOCATION: westeurope
  INFRA_RESOURCE_GROUP: tfstate-resourcegroup
  TF_STATE_STORAGE_ACCOUNT_NAME: tfstatestorage102
  TF_STATE_CONTAINER_NAME: tfstate
  TF_STATE_FILE_NAME: tfstate
  TF_STATE_ACCESS_KEY: ""
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AKS_RESOURCE_GROUP: aks-102-rg
  AKS_NAME: aks-102
  SQL_INSTANCE_NAME: sqlforaks102
  ADMINISTRATOR_LOGIN_PASSWORD: psqladmin@2382
  ADMINISTRATOR_LOGIN: Aa123456
  STORAGE_NAME: storageforaks102
permissions:
    id-token: write
    contents: read

jobs:
  build-and-deploy:
    name: Build and deploy into AKS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
      - name: Create storage for tfstate
        uses: azure/CLI@v1
        with:
          azcliversion: 2.35.0
          inlineScript: |
            # Create the resource group
            az group create -n $INFRA_RESOURCE_GROUP -l $LOCATION

            # Create the storage account
            az storage account create -g $INFRA_RESOURCE_GROUP -l $LOCATION \
              --name $TF_STATE_STORAGE_ACCOUNT_NAME \
              --sku Standard_LRS \
              --encryption-services blob

            # Retrieve the storage account key
            ACCOUNT_KEY=$(az storage account keys list --resource-group $INFRA_RESOURCE_GROUP --account-name $TF_STATE_STORAGE_ACCOUNT_NAME --query [0].value -o tsv)

            # Create a storage container (for the Terraform State)
            az storage container create --name $TF_STATE_CONTAINER_NAME --account-name $TF_STATE_STORAGE_ACCOUNT_NAME --account-key $ACCOUNT_KEY

            echo "TF_STATE_ACCESS_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV
      - name: Replace Variables in terraform.tfvars
        uses: datamonsters/replace-action@v2
        with:
          files: infra/terraform.tfvars
          replacements: |
            __AKS_RESOURCE_GROUP__=${{ env.AKS_RESOURCE_GROUP}},__AKS_NAME__=${{ env.AKS_NAME}},__CLIENT_ID__=${{ secrets.AZURE_CLIENT_ID }},__CLIENT_SECRET__= ${{ secrets.AZURE_CLIENT_SECRET }},__SUBSCRIPTION_ID__=${{ secrets.AZURE_SUBSCRIPTION_ID }} ,__TENANT_ID__=${{ secrets.AZURE_TENANT_ID }}
            
   # __ADMINISTRATOR_LOGIN__=${{ env.ADMINISTRATOR_LOGIN }},__ADMINISTRATOR_LOGIN_PASSWORD__=${{ env.ADMINISTRATOR_LOGIN_PASSWORD }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7
      - name: Terraform fmt
        id: fmt
        run: terraform fmt
        working-directory: infra
        continue-on-error: true

      - name: Terraform Init (Azure Backend)
        id: init
        run: terraform init 
          -backend-config="storage_account_name=$TF_STATE_STORAGE_ACCOUNT_NAME"
          -backend-config="container_name=$TF_STATE_CONTAINER_NAME"
          -backend-config="access_key=$TF_STATE_ACCESS_KEY" 
          -backend-config="key=$TF_STATE_FILE_NAME"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
        working-directory: infra/

      - name: Terraform Validate
        run: terraform validate -no-color
        working-directory: infra
      - name: Terraform Plan
        id: plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
        run: terraform plan -var-file="terraform.tfvars"
        working-directory: infra
        continue-on-error: true
      - name: Terraform apply
        run: terraform apply -auto-approve
        working-directory: infra
        env:
         ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
         ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
         ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
         ARM_USE_OIDC: true
      # - name: Terraform destroy
      #   run: terraform destroy -auto-approve
      #   working-directory: infra
      #   env:
      #    ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      #    ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #    ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      #    ARM_USE_OIDC: true
 
  deploy-app-aks:
    name: Deploy app into Kubernetes
    runs-on: ubuntu-latest
    needs:
      - build-and-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
    
      - name: Login to Azure
        uses: azure/login@v1
        with:
         client-id: ${{ secrets.AZURE_CLIENT_ID }}
         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - uses: azure/setup-kubectl@v3
        name: Setup kubectl
      - name: Setup kubelogin
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.26'

      - name: Connect to AKS
        uses: Azure/aks-set-context@v3
        with:
          cluster-name: ${{ env.AKS_NAME }}
          resource-group: ${{ env.AKS_RESOURCE_GROUP }}
          admin: 'false'
          use-kubelogin: 'true'


      - name: Install helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add stable https://charts.helm.sh/stable
      - name: Install Kube-prometheus-stack
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --force -i kube-prometheus-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring --create-namespace --timeout 20m30s
      - name: Install Cert Manager
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm upgrade --force -i cert-manager jetstack/cert-manager \
            --namespace cert-manager --create-namespace \
            --version v1.11.0 \
            --set installCRDs=true --timeout 20m30s
      - name: Install Nginx Controller
        run: |
          helm repo add nginx-stable https://helm.nginx.com/stable
          helm repo update
          helm upgrade --force -i ingress-nginx ingress-nginx \
            --repo https://kubernetes.github.io/ingress-nginx \
            --namespace ingress-nginx --create-namespace \
            --set controller.metrics.enabled=true --timeout 20m30s
          kubectl get services -n ingress-nginx
